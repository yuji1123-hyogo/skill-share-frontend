paths:
  /users/me:
    get:
      summary: 自分のユーザー情報取得
      description: 認証済みユーザーの情報を取得します。
      security:
        - bearerAuth: []
      responses:
        "200":
          description: ユーザー情報取得成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "ユーザー情報取得成功"
                  user:
                    $ref: "../components/schemas.yaml#/schemas/User"
        "401":
          $ref: "../components/responses.yaml#/responses/UnauthorizedResponse"

    put:
      summary: 自分のユーザー情報更新
      description: 認証済みユーザーの情報を更新します。
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: 更新するユーザー名
                  example: "newusername"
                profilePicture:
                  type: string
                  format: uri
                  nullable: true
                  description: 更新するプロフィール画像URL
                bio:
                  type: string
                  nullable: true
                  description: 更新する自己紹介
                tags:
                  type: array
                  items:
                    type: string
                  description: 更新するタグリスト
      responses:
        "200":
          description: ユーザー情報更新成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "ユーザー情報を更新しました"
                  user:
                    $ref: "../components/schemas.yaml#/schemas/User"
        "400":
          $ref: "../components/responses.yaml#/responses/ValidationErrorResponse"
        "401":
          $ref: "../components/responses.yaml#/responses/UnauthorizedResponse"

  /users/me/clubs:
    get:
      summary: 参加しているクラブの取得
      description: 認証済みユーザーが参加しているクラブの一覧を取得します。
      security:
        - bearerAuth: []
      responses:
        "200":
          description: 参加クラブ取得成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "参加しているクラブ一覧を取得しました"
                  clubs:
                    type: array
                    items:
                      type: string
                    description: クラブIDのリスト
        "401":
          $ref: "../components/responses.yaml#/responses/UnauthorizedResponse"

  /users/search:
    get:
      summary: ユーザー検索
      description: 指定した条件に合うユーザーを検索します。
      parameters:
        - name: username
          in: query
          required: false
          schema:
            type: string
          description: 検索するユーザー名
        - name: tags
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
          description: 検索するタグリスト
      responses:
        "200":
          description: ユーザー検索結果
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "ユーザー検索結果"
                  users:
                    type: array
                    items:
                      type: string
                    description: ユーザーIDのリスト

  /users/{userId}:
    get:
      summary: 特定のユーザー情報取得
      description: 指定したユーザーの情報を取得します。
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: 取得するユーザーのID
      responses:
        "200":
          description: ユーザー情報取得成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "ユーザー情報取得成功"
                  user:
                    $ref: "../components/schemas.yaml#/schemas/User"
        "404":
          $ref: "../components/responses.yaml#/responses/NotFoundResponse"

  /users/{userId}/follow:
    put:
      summary: ユーザーのフォロー・フォロー解除
      description: 指定したユーザーをフォローまたはフォロー解除します。
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: フォローする/解除するユーザーのID
      responses:
        "200":
          description: フォロー状態の変更成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "フォロー状態を変更しました"
                  user:
                    $ref: "../components/schemas.yaml#/schemas/User"
        "400":
          $ref: "../components/responses.yaml#/responses/ValidationErrorResponse"
        "401":
          $ref: "../components/responses.yaml#/responses/UnauthorizedResponse"
        "404":
          $ref: "../components/responses.yaml#/responses/NotFoundResponse"
